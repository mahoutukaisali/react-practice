{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","style","width","height","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,G,MAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,aACHC,MAAO,CAACC,MAAO,IAAKC,OAAQ,OAG9B,mCAAMR,EAAMI,QAAQK,KAApB,OACA,kCAAKT,EAAMI,QAAQM,MAAnB,YCHKC,G,MAAW,SAACX,GACvB,OAAQ,qBAAKC,UAAU,YAAf,SAEFD,EAAMY,SAASC,KAAI,SAAAT,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCVlBS,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACEf,UAAU,SACVgB,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCyCFG,G,wDA3Cb,aAAe,IAAD,8BAGZ,gBAeFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAGf,EAAKN,aAAe,EAAKA,aAAaU,KAAlB,gBATR,E,gEAYO,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACT,SAAUmB,S,+BASnC,IAAD,EAC4BC,KAAKP,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZW,EAAmBrB,EAASsB,QAAO,SAAA9B,GAAO,OAC9CA,EAAQK,KAAK0B,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAKlC,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,CACEc,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GArCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5a423e46.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img \n          alt='monster' \n          src={`https://robohash.org/${props.monster.id}?set=set2`} \n          style={{width: 180, height: 180 }}\n          \n        />\n        <h2> {props.monster.name} </h2>\n        <p> {props.monster.email} </p>\n    </div>\n)","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css';\n\n/* A default value of CardList. It can be over written in App.js \n  - map() is a function which iterate inside of state function.\n  - monster is a new function \n  - id is added in order to identify which html elements need to render/change so that react \n    does not need to render everythings of elements when a id is changed. */\nexport const CardList = (props) => {\n  return (<div className='card-list'>\n    {\n        props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/> \n        ))\n    }\n  </div>)\n}","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n      className='search'\n      type='search' \n      placeholder={ placeholder } \n      onChange={ handleChange } \n    />\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    /* super() calls the constructor method on the component class\n    so that it enables us to access state property*/\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n    // .bind() is an method of any function\n    this.handleChange = this.handleChange.bind(this);\n  }\n  // this component will be readed whenever open a page\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}));\n  }\n  // explicitly \"state\" what context I want \"this\" to be. \n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  /* render() will call a state below as soon as state is changed \n    a CardList tag comes from CardList variable in card-list.component.jsx */\n  render(){\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return (\n      <div className=\"App\">\n        <h1>Monster Roboex</h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n        \n      </div> \n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}